using System;
using System.Collections.Generic;
using System.Linq;
using QuantConnect.Data;
using QuantConnect.Data.Market;
using QuantConnect.Orders;
using QuantConnect.Interfaces;

namespace QuantConnect.Algorithm.CSharp
{
    /// <summary>
    /// This example demonstrates how to add options for a given underlying equity security.
    /// It also shows how you can prefilter contracts easily based on strikes and expirations, and how you
    /// can inspect the option chain to pick a specific option contract to trade.
    /// </summary>
    /// <meta name="tag" content="using data" />
    /// <meta name="tag" content="options" />
    /// <meta name="tag" content="filter selection" />
    public class StochasticRSI_Options : QCAlgorithm, IRegressionAlgorithmDefinition
    {
        private const string UnderlyingTickerSPY = "SPY";
        private const string UnderlyingTickerVIX = "VIX";
        public Symbol UnderlyingSPY = QuantConnect.Symbol.Create(UnderlyingTickerSPY, SecurityType.Equity, Market.USA);
        public Symbol OptionSymbolSPY = QuantConnect.Symbol.Create(UnderlyingTickerSPY, SecurityType.Option, Market.USA);
        public Symbol UnderlyingVIX = QuantConnect.Symbol.Create(UnderlyingTickerVIX, SecurityType.Equity, Market.USA);
        public Symbol OptionSymbolVIX = QuantConnect.Symbol.Create(UnderlyingTickerVIX, SecurityType.Option, Market.USA);
        public string currentPos;
        RelativeStrengthIndex _rsi3;
        RelativeStrengthIndex _rsi14;
        decimal _rsiMax3 = 0;
        decimal _rsiMax14 = 0;
        decimal _rsiMin3 = 100;
        decimal _rsiMin14 = 100;
        decimal topProf = 0;
        RollingWindow<decimal> rsi3 = new RollingWindow<decimal>(3);
        RollingWindow<decimal> rsi14 = new RollingWindow<decimal>(14);
        decimal posSize = 0;
		//add int for each symbol that track days since last closed position
		//or some other stop that will keep it from reacting to short term fake signals

        public override void Initialize()
        {
        	SetWarmUp(200); //Warm up 200 bars for all subscribed data.
			SetWarmUp(TimeSpan.FromDays(7)); //Warm up 7 days of data.
        	
            SetStartDate(2015, 12, 24);
            SetEndDate(2017, 12, 24);
            SetCash(100000);

            var equitySPY = AddEquity(UnderlyingTickerSPY, Resolution.Minute);
            var optionSPY = AddOption(UnderlyingTickerSPY);
            var equityVIX = AddEquity(UnderlyingTickerVIX, Resolution.Minute);
            var optionVIX = AddOption(UnderlyingTickerVIX);
            _rsi3 = RSI("SPY", 3,  MovingAverageType.Simple, Resolution.Daily);
            _rsi14 = RSI("SPY", 14,  MovingAverageType.Simple, Resolution.Daily);

            // choose the period that you want to get the rsi max/min for here
            
            // set our strike/expiry filter for this option chain
            optionSPY.SetFilter(u => u.Strikes(0, +10)
                                   .Expiration(TimeSpan.Zero, TimeSpan.FromDays(90)));

            // use the underlying equity as the benchmark
            SetBenchmark(equitySPY.Symbol);
        }

        /// <summary>
        /// Event - v3.0 DATA EVENT HANDLER: (Pattern) Basic template for user to override for receiving all subscription data in a single event
        /// </summary>
        /// <param name="slice">The current slice of data keyed by symbol string</param>
        public override void OnData(Slice slice) {
        	if (Portfolio.Invested) {
        		if (Portfolio.TotalUnrealisedProfit > topProf) {
        			topProf = Portfolio.TotalUnrealisedProfit;
        		}
        	}
        	rsi3.Add(_rsi3.Current.Value);
        	rsi14.Add(_rsi14.Current.Value);
        	
        	if (rsi3.IsReady && rsi14.IsReady) {
        		_rsiMax3 = 0;
        		_rsiMax14 = 0;
        		_rsiMin3 = 100;
        		_rsiMin14 = 100;
	        	for (int i = 0; i < rsi3.Size; i++) {
					if (rsi3[i] > _rsiMax3) {
						_rsiMax3 = rsi3[i];
					}
					if (rsi3[i] < _rsiMin3) {
						_rsiMin3 = rsi3[i];
					}
				}
				
				for (int j = 0; j < rsi14.Size; j++) {
					if (rsi14[j] > _rsiMax14) {
						_rsiMax14 = rsi14[j];
					}
					if (rsi14[j] < _rsiMin14) {
						_rsiMin14 = rsi14[j];
					}
				}
	        	
	        	if (IsMarketOpen(UnderlyingSPY) && IsMarketOpen(UnderlyingVIX)) {
	        	//SPY RSI check for call (only???)
	        		if (_rsiMax3 != 0 && _rsiMax14 != 0 && _rsiMin3 != 0 && _rsiMin14 != 0 && _rsiMax3 != _rsiMin3 && _rsiMax14 != _rsiMin14) {
		        		if ((_rsi3.Current.Value - _rsiMin3)/(_rsiMax3 - _rsiMin3) > (_rsi14.Current.Value - _rsiMin14)/(_rsiMax14 - _rsiMin14) && _rsi3.Current.Value < 30) {
		                	OptionChain chainSPY;
		                //check if we have a SPY option
			                if ( 
			                		slice.OptionChains.TryGetValue(OptionSymbolSPY, out chainSPY)) {
			                    // we find at the money (ATM) put contract with farthest expiration
			                    var atmContractSPY = chainSPY
			                        .OrderByDescending(x => x.Expiry)
			                        .ThenByDescending(x => x.Strike)
			                        .First();
			
			                    if (atmContractSPY != null) {
			                        // if found, trade it
			                        currentPos = atmContractSPY.Symbol;
			                        posSize = atmContractSPY.BidPrice;
			                        MarketOrder(atmContractSPY.Symbol, 1);
			                    }
			                }
		        		}
		        //sell signal SPY
		        // || ((Portfolio.TotalUnrealisedProfit / posSize) < (decimal) -0.1) || (Portfolio.TotalUnrealisedProfit / posSize) > (decimal) 0.25)
		        		if (Portfolio.Invested) {
				            if ((_rsi3.Current.Value - _rsiMin3)/(_rsiMax3 - _rsiMin3) < (_rsi14.Current.Value - _rsiMin14)/(_rsiMax14 - _rsiMin14)) {
				            		//add method to look if profit drops a certain percentage/have a parameter for percent off of top profit rather than off of initial position
				            	MarketOrder(currentPos, -1);
				            }
		        		}
	        		}
	        	}
        	}
        }

        /// <summary>
        /// Order fill event handler. On an order fill update the resulting information is passed to this method.
        /// </summary>
        /// <param name="orderEvent">Order event details containing details of the evemts</param>
        /// <remarks>This method can be called asynchronously and so should only be used by seasoned C# experts. Ensure you use proper locks on thread-unsafe objects</remarks>
        public override void OnOrderEvent(OrderEvent orderEvent)
        {
            Log(orderEvent.ToString());
        }

        /// <summary>
        /// This is used by the regression test system to indicate if the open source Lean repository has the required data to run this algorithm.
        /// </summary>
        public bool CanRunLocally { get; } = true;

        /// <summary>
        /// This is used by the regression test system to indicate which languages this algorithm is written in.
        /// </summary>
        public Language[] Languages { get; } = { Language.CSharp, Language.Python };

        /// <summary>
        /// This is used by the regression test system to indicate what the expected statistics are from running the algorithm
        /// </summary>
        public Dictionary<string, string> ExpectedStatistics => new Dictionary<string, string>
        {
            {"Total Trades", "2"},
            {"Average Win", "0%"},
            {"Average Loss", "-0.28%"},
            {"Compounding Annual Return", "-78.105%"},
            {"Drawdown", "0.300%"},
            {"Expectancy", "-1"},
            {"Net Profit", "-0.280%"},
            {"Sharpe Ratio", "0"},
            {"Loss Rate", "100%"},
            {"Win Rate", "0%"},
            {"Profit-Loss Ratio", "0"},
            {"Alpha", "0"},
            {"Beta", "0"},
            {"Annual Standard Deviation", "0"},
            {"Annual Variance", "0"},
            {"Information Ratio", "0"},
            {"Tracking Error", "0"},
            {"Treynor Ratio", "0"},
            {"Total Fees", "$0.50"}
        };
    }
}